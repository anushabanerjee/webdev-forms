{"version":3,"sources":["Components/Form/form.js","Components/UserForm/UserForm.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onNameChange","event","setState","name","target","value","onEmailChange","email","onPhoneChange","phone","onGenderChange","gender","onPasswordChange","password","onSubmit","state","length","window","alert","clearForm","render","className","onChange","type","placeholder","onClick","React","Component","UserForm","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAiIeA,G,wDA5HX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAUVC,aAAe,SAACC,GACZ,EAAKC,SACD,CAACC,KAAMF,EAAMG,OAAOC,SAbV,EAiBlBC,cAAgB,SAACL,GACb,EAAKC,SACD,CAACK,MAAON,EAAMG,OAAOC,SAnBX,EAuBlBG,cAAgB,SAACP,GACb,EAAKC,SACD,CAACO,MAAOR,EAAMG,OAAOC,SAzBX,EA6BlBK,eAAiB,SAACT,GACd,EAAKC,SACD,CAACS,OAAQV,EAAMG,OAAOC,SA/BZ,EAoClBO,iBAAmB,SAACX,GAChB,EAAKC,SACD,CAACW,SAASZ,EAAMG,OAAOC,SAtCb,EA2ClBS,SAAW,WAEiB,KAArB,EAAKC,MAAMN,OACa,KAA3B,EAAKM,MAAMN,MAAMO,QAKjBC,OAAOC,MAAP,0BACQ,EAAKH,MAAMZ,KADnB,4BAES,EAAKY,MAAMR,MAFpB,4BAGS,EAAKQ,MAAMN,MAHpB,6BAIU,EAAKM,MAAMJ,OAJrB,+BAKY,EAAKI,MAAMF,SALvB,eAQA,EAAKM,aAZDF,OAAOC,MAAM,0BA/CH,EA8DlBC,UAAY,WACR,EAAKjB,SAAS,CACVC,KAAK,GACLI,MAAM,GACNE,MAAM,GACNE,OAAO,GACPE,SAAS,MApEC,EAyElBO,OAAS,WACL,OACI,yBAAKC,UAAU,aACX,uBAAGA,UAAU,SAAb,IAAsB,yCAEtB,2BACAC,SAAU,EAAKtB,aACfK,MAAO,EAAKU,MAAMZ,KAClBkB,UAAU,cACVE,KAAK,OACLC,YAAY,oBAEZ,2BAAOF,SAAU,EAAKhB,cACtBD,MAAO,EAAKU,MAAMR,MAClBc,UAAU,cACVE,KAAK,QACLC,YAAY,yBAEZ,2BAAOF,SAAU,EAAKd,cACtBH,MAAO,EAAKU,MAAMN,MAClBY,UAAU,cACVE,KAAK,OACLC,YAAY,4BAEZ,4BAAQF,SAAU,EAAKZ,eACvBL,MAAO,EAAKU,MAAMJ,OAClBU,UAAU,eACN,iDACA,4BAAQhB,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,sBAAd,sBACA,4BAAQA,MAAM,SAAd,UAGJ,2BAAOiB,SAAU,EAAKV,iBACtBP,MAAO,EAAKU,MAAMF,SAClBQ,UAAU,cACVE,KAAK,WACLC,YAAY,wBAEZ,4BAAQC,QAAS,EAAKX,SAAUO,UAAU,cAA1C,UACA,4BAAQI,QAAS,EAAKN,UAAWE,UAAU,aAA3C,kBAjHR,EAAKN,MAAQ,CACTZ,KAAK,GACLI,MAAM,GACNE,MAAM,GACNE,OAAO,GACPE,SAAS,IAPC,E,UAFHa,IAAMC,YCSVC,G,MARE,SAAC7B,GACd,OACI,yBAAKsB,UAAU,kBACX,kBAAC,EAAD,S,MCCGQ,MAJf,WACE,OAAQ,kBAAC,EAAD,OCOUC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.81dafe8b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css'\r\n\r\nclass Form extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name:\"\",\r\n            email:\"\",\r\n            phone:\"\",\r\n            gender:\"\",\r\n            password:\"\"\r\n        }\r\n    }\r\n\r\n    onNameChange = (event) => {\r\n        this.setState(\r\n            {name: event.target.value}\r\n        )\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n        this.setState(\r\n            {email: event.target.value}\r\n        )\r\n    }\r\n\r\n    onPhoneChange = (event) => {\r\n        this.setState(\r\n            {phone: event.target.value}\r\n        )\r\n    }\r\n\r\n    onGenderChange = (event) => {\r\n        this.setState(\r\n            {gender: event.target.value}\r\n        )\r\n\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState(\r\n            {password:event.target.value}\r\n        )\r\n    }\r\n\r\n    \r\n    onSubmit = () =>{ \r\n        \r\n        if(this.state.phone === '' || \r\n        this.state.phone.length !==10){\r\n            window.alert(\"Invalid Phone Number!\")\r\n            return;\r\n\r\n        }\r\n        window.alert(`\r\n        Name: ${this.state.name}\r\n        Email: ${this.state.email}\r\n        Phone: ${this.state.phone}\r\n        Gender: ${this.state.gender}\r\n        Password: ${this.state.password}\r\n        `)\r\n        \r\n        this.clearForm()\r\n    }\r\n\r\n    clearForm = () => {\r\n        this.setState({\r\n            name:\"\",\r\n            email:\"\",\r\n            phone:\"\",\r\n            gender:\"\",\r\n            password:\"\"\r\n        })\r\n\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"form-body\"> \r\n                <p className=\"title\"> <u>User Form</u></p>\r\n                \r\n                <input \r\n                onChange={this.onNameChange}\r\n                value={this.state.name}\r\n                className=\"input-style\" \r\n                type=\"text\" \r\n                placeholder=\"Enter your Name\"/>\r\n                \r\n                <input onChange={this.onEmailChange}\r\n                value={this.state.email}\r\n                className=\"input-style\" \r\n                type=\"email\" \r\n                placeholder=\"Enter your E-mail ID\"/>\r\n                \r\n                <input onChange={this.onPhoneChange}\r\n                value={this.state.phone}\r\n                className=\"input-style\" \r\n                type=\"text\" \r\n                placeholder=\"Enter your Phone Number\"/>\r\n\r\n                <select onChange={this.onGenderChange}\r\n                value={this.state.gender}\r\n                className=\"input-style\">\r\n                    <option>Choose Gender</option>\r\n                    <option value=\"Male\">Male</option>\r\n                    <option value=\"Female\">Female</option>\r\n                    <option value=\"Transgender Male\">Transgender Male</option>\r\n                    <option value=\"Transgender Female\">Transgender Female</option>\r\n                    <option value=\"Other\">Other</option>\r\n                </select>\r\n\r\n                <input onChange={this.onPasswordChange}\r\n                value={this.state.password}\r\n                className=\"input-style\" \r\n                type=\"password\"\r\n                placeholder=\"Enter your Password\"/>\r\n\r\n                <button onClick={this.onSubmit} className=\"submit-btn\">SUBMIT</button>\r\n                <button onClick={this.clearForm} className=\"clear-btn\"> Clear Form </button>\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Form; ","import React from 'react'\r\nimport Form from '../Form/form.js'\r\nimport './style.css'\r\n\r\nconst UserForm = (props) => {\r\n    return( \r\n        <div className=\"main-container\">\r\n            <Form/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserForm;","import React from 'react';\nimport Form from './Components/UserForm/UserForm.js'\nimport './App.css';\n\nfunction App() {\n  return (<Form/>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}